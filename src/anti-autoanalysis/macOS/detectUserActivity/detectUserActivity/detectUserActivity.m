//
//  main.m
//  detectUserActivity
//
//  Created by Aaron Lichtman on 5/3/19.
//  Copyright Â© 2019 Aaron Lichtman. All rights reserved.
//
//  This code is largely based on Patrick Wardle's (Objective-See) SniffMK project.
//  That project can be found here: https://github.com/objective-see/sniffMK
//
//  There are two compilation options for this program.
//      1. Xcode -> Product -> Build
//      2. $ clang -o detectUserActivity detectUserActivity.m -framework Cocoa

// NOTE: Totally broken at the moment.

#import <Foundation/Foundation.h>

static CFMachPortRef eventTap = NULL;
static NSMutableArray *mouseEvents = NULL;

bool isRoot() {
    return 0 != geteuid();
}

CGEventRef mouseEventCallback(CGEventTapProxy proxy, CGEventType type,
                              CGEventRef event, void *refcon) {
    // If the event isn't a mouse movement, we don't care about it.
    if (type != kCGEventMouseMoved)
        return event;
    
    // TODO: Tbh not sure what this does but XCode says it needs to be there?
    [mouseEvents addObject:(__bridge id _Nonnull)(event)];
    
    // Get mouse coordinates and print them out.
    CGPoint location = CGEventGetLocation(event);
    NSLog(@"(%f, %f)\n", location.x, location.y);
    return event;
}

void exitHelper() {
    if (eventTap != NULL) {
        CFRelease(eventTap);
        eventTap = NULL;
    }
}

int main(int argc, const char * argv[]) {
    NSLog(@"macOS Detect User Activity Test");
    
    CFRunLoopSourceRef runLoopSource = NULL;

    @autoreleasepool {
        if (!isRoot()) {
            NSLog(@"ERR: Must be root.");
            exitHelper();
        }
        
        NSLog(@"Configuring...");
        
        // Set up array to hold all mouse events
        mouseEvents = [NSMutableArray arrayWithCapacity:200];
        
        // Configure eventMask to capture all mouse events.
        CGEventMask eventMask = 0;
        eventMask = CGEventMaskBit(kCGEventLeftMouseDown)    |
                    CGEventMaskBit(kCGEventLeftMouseUp)      |
                    CGEventMaskBit(kCGEventRightMouseDown)   |
                    CGEventMaskBit(kCGEventRightMouseUp)     |
                    CGEventMaskBit(kCGEventLeftMouseDragged) |
                    CGEventMaskBit(kCGEventRightMouseDragged);
        
        // Create eventTap
        eventTap = CGEventTapCreate(kCGSessionEventTap,  // Place event tap where HID system and remote control events enter a login session.
                                    kCGHeadInsertEventTap, // Insert new events at head of list
                                    0, // No extra options
                                    eventMask, // We only care about mouse events
                                    mouseEventCallback, // Every time a mouse event occurs, execute this callback.
                                    NULL);
        if(eventTap == NULL) {
            NSLog(@"ERR: Failed to create event tap. (CGEventTapCreate)\n");
            exitHelper();
        }
        
        runLoopSource = CFMachPortCreateRunLoopSource(kCFAllocatorDefault, eventTap, 0);
        
        // Add to current run loop.
        CFRunLoopAddSource(CFRunLoopGetCurrent(), runLoopSource, kCFRunLoopCommonModes);
        
        // Enable tap
        CGEventTapEnable(eventTap, true);
        
        NSLog(@"Checking for mouse activity...");
        
        CFRunLoopRun();
        
        // TODO: Start timer for 1 minute.
        
        // TODO: At end of timer, pass mouseEvents array to some function that figures out if there is a real person there.
        // Simplest approach is just: "Are there events?"
        
        // TODO: Look into programs that have been written to simulate keyboard and mouse activity.
    }
    return 0;
}

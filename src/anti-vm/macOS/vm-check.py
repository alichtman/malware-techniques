# Different implementations of these mac virtualization detection techniques were used in OSX/MacRansom.
# Objective-See's analysis of this malware can be found here: https://objective-see.com/blog/blog_0x1E.html
# I found his work incredibly helpful as I was researching macOS malware.
import sys
sys.path.insert(0, "../..")
from .utils.utils import run_cmd
from .utils.print import *


def check_hardware_model():
	"""
	On a real Mac, when the system is queried for the model, it will return
	something like this: "hw.model: MacBookPro14,2", but on a VM it will
	return something like 'VMware7,1'
	"""
	hardware_model = run_cmd("sysctl hw.model").stdout.decode()
	if "Mac" not in hardware_model.split()[1]:
		print_red("Running on a VM.")
	else:
		print_blue("Running on a real Mac.")


def check_logical_physical_cpu_ratio():
	"""
	A ratio of logical CPUs to physical CPUs that equals 1 may indicate
	a virtualized Mac environment.

	Real Mac:
		$ sysctl -n hw.logicalcpu
		4
		$ sysctl -n hw.physicalcpu
		2

	In VM:
		$ sysctl -n hw.logicalcpu
		2
		$ sysctl -n hw.physicalcpu
		2
	"""
	logical_cpu_count = int(run_cmd("sysctl -n hw.logicalcpu").stdout.decode())
	physical_cpu_count = int(run_cmd("sysctl -n hw.physicalcpu").stdout.decode())

	if logical_cpu_count == physical_cpu_count:
		print_red("Running on a VM.")
	else:
		print_blue("Running on a real Mac.")


def main():
	check_hardware_model()
	check_logical_physical_cpu_ratio()
